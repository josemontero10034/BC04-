// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// All enumns goes here at the top
enum UserRole {
  CLIENT
  PROVIDER
  ADMINISTRATOR
}

enum UserGender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum EmergencyContactRelation {
  PARENT
  CHILD
  PARTNER
  FRIEND
  OTHER
}

enum OrderStatus {
  CREATED
  ASSIGNED
  EVALUATING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ServiceLocation {
  AT_CLIENT_LOCATION
  AT_PROVIDER_LOCATION
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum BudgetStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ModificationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Agrega aquí cualquier otro tipo de modificación que necesites registrar.
enum ModificationsType {
  NAME_CHANGE
  SERVICE_DESCRIPTION_CHANGE
  SERVICE_OFFERED_CHANGE
}

enum CodeStatus {
  FIRST_CHANCE
  SECOND_CHANCE
  CONCLUDED
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  // Necessary for Next auth
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // BluePages User
  password       String?
  firstName      String?
  lastName       String?
  gender         UserGender?
  personalPhone  String?     @unique
  documentCode   String?
  documentImgUrl String?
  isVerified     Boolean?    @default(false)
  isActive       Boolean?    @default(true)
  termsOfService Boolean?    @default(false)

  roles         UserRole[]
  client        Client?
  provider      Provider?
  administrator Administrator?

  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt

  // Logs for User model
  createdBy    User?   @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  createdUsers User[]  @relation("UserCreatedBy")

  lastUpdatedBy   User?   @relation("UserLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String?
  updatedUsers    User[]  @relation("UserLastUpdatedBy")

  // Logs for Client model
  createdClients Client[] @relation("ClientCreatedBy")
  updatedClients Client[] @relation("ClientLastUpdatedBy")

  // Logs for Provider model
  createdProviders Provider[] @relation("ProviderCreatedBy")
  updatedProviders Provider[] @relation("ProviderLastUpdatedBy")

  // Logs for EmergencyContact model
  createdEmergencyContacts EmergencyContact[] @relation("EmergencyContactCreatedBy")
  updatedEmergencyContacts EmergencyContact[] @relation("EmergencyContactLastUpdatedBy")

  // Logs for Administrator model
  createdAdministrators Administrator[] @relation("AdministratorCreatedBy")
  updatedAdministrators Administrator[] @relation("AdministratorLastUpdatedBy")

  // Logs for Address model
  createdAddresses Address[] @relation("AddressCreatedBy")
  updatedAddresses Address[] @relation("AddressLastUpdatedBy")

  // Logs for Order model
  createdOrders Order[] @relation("OrderCreatedBy")
  updatedOrders Order[] @relation("OrderLastUpdatedBy")

  // Logs for PaymentMethod model
  createdOrderOffer OrderOffer[] @relation("OrderOfferCreatedBy")
  updatedOrderOffer OrderOffer[] @relation("OrderOfferLastUpdatedBy")

  // Logs for OrderBudget model
  createdOrderBudget OrderBudget[] @relation("OrderBudgetCreatedBy")
  updatedOrderBudget OrderBudget[] @relation("OrderBudgetLastUpdatedBy")

  // Logs for ServiceType model
  createdServices ServiceType[] @relation("ServiceCreatedBy")
  updatedServices ServiceType[] @relation("ServiceLastUpdatedBy")

  // Logs for SubServiceType model
  createdSubServices SubServiceType[] @relation("SubServiceTypeCreatedBy")
  updatedSubServices SubServiceType[] @relation("SubServiceTypeLastUpdatedBy")

  // Logs for PaymentMethod model
  createdPaymentMethod PaymentMethod[] @relation("PaymentMethodCreatedBy")
  updatedPaymentMethod PaymentMethod[] @relation("PaymentMethodLastUpdatedBy")

  // Logs for Province model
  createdProvince Province[] @relation("ProvinceCreatedBy")
  updatedProvince Province[] @relation("ProvinceLastUpdatedBy")

  // Logs for City model
  createdCity City[] @relation("CityCreatedBy")
  updatedCity City[] @relation("CityLastUpdatedBy")

  // Logs for Sector model
  createdSector Sector[] @relation("SectorCreatedBy")
  updatedSector Sector[] @relation("SectorLastUpdatedBy")

  // Logs for SubSector model
  createdSubSector SubSector[] @relation("SubSectorCreatedBy")
  updatedSubSector SubSector[] @relation("SubSectorLastUpdatedBy")
}

model Client {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders         Order[]
  addresses      Address[]
  paymentMethods PaymentMethod[]

  createdBy       User?    @relation("ClientCreatedBy", fields: [createdById], references: [id])
  createdById     String?
  lastUpdatedBy   User?    @relation("ClientLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String?
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model Provider {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  homePhone              String?                 @unique
  rncOrDgiiCode          String?
  address                Address?
  orders                 Order[]
  emergencyContacts      EmergencyContact[]
  modificationsApprovals ModificationsApproval[]

  serviceTypes    ServiceType[]    @relation("ProviderServices")
  subServiceTypes SubServiceType[] @relation("ProviderSubServices")
  orderOffers     OrderOffer[]

  createdBy       User?    @relation("ProviderCreatedBy", fields: [createdById], references: [id])
  createdById     String?
  lastUpdatedBy   User?    @relation("ProviderLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String?
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model EmergencyContact {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  providerId BigInt
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  contactName     String
  contactRelation EmergencyContactRelation
  contactPhone    String

  createdBy       User?    @relation("EmergencyContactCreatedBy", fields: [createdById], references: [id])
  createdById     String?
  lastUpdatedBy   User?    @relation("EmergencyContactLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String?
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model Administrator {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdBy       User?    @relation("AdministratorCreatedBy", fields: [createdById], references: [id])
  createdById     String?
  lastUpdatedBy   User?    @relation("AdministratorLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String?
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model Order {
  id                BigInt             @id @default(autoincrement()) @db.BigInt
  client            Client             @relation(fields: [clientId], references: [id])
  clientId          BigInt
  address           Address            @relation(fields: [addressId], references: [id])
  addressId         BigInt
  status            OrderStatus?       @default(CREATED)
  price             Decimal?
  serviceType       ServiceType?       @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId     BigInt?            @db.BigInt
  subServiceType    SubServiceType?    @relation(fields: [subServiceId], references: [id])
  subServiceId      BigInt?            @db.BigInt
  serviceLocation   ServiceLocation    @default(AT_CLIENT_LOCATION)
  description       String?            @db.Text
  offers            OrderOffer[] // Ask what to do with non accepted offers or rejected offers
  provider          Provider?          @relation(fields: [providerId], references: [id])
  providerId        BigInt?
  budget            OrderBudget?
  isVerified        Boolean            @default(false)
  VerificationOrder VerificationOrder?

  createdBy       User     @relation("OrderCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("OrderLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model OrderOffer {
  id         BigInt      @id @default(autoincrement()) @db.BigInt
  orderId    BigInt
  order      Order       @relation(fields: [orderId], references: [id])
  providerId BigInt
  provider   Provider    @relation(fields: [providerId], references: [id])
  status     OfferStatus @default(PENDING)

  createdBy       User     @relation("OrderOfferCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("OrderOfferLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model OrderBudget {
  id          BigInt       @id @default(autoincrement()) @db.BigInt
  order       Order        @relation(fields: [orderId], references: [id])
  orderId     BigInt       @unique
  status      BudgetStatus @default(PENDING)
  amount      Decimal      @db.Decimal(10, 4)
  description String?      @db.VarChar(100)

  createdBy       User     @relation("OrderBudgetCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("OrderBudgetLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model ServiceType {
  id               BigInt           @id @default(autoincrement()) @db.BigInt
  name             String
  subServicesTypes SubServiceType[]
  orders           Order[]
  providers        Provider[]       @relation("ProviderServices")

  createdBy       User     @relation("ServiceCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("ServiceLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model SubServiceType {
  id            BigInt      @id @default(autoincrement()) @db.BigInt
  name          String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId BigInt      @db.BigInt
  orders        Order[]
  providers     Provider[]  @relation("ProviderSubServices")

  createdById     String?
  createdBy       User?    @relation("SubServiceTypeCreatedBy", fields: [createdById], references: [id])
  lastUpdatedById String?
  lastUpdatedBy   User?    @relation("SubServiceTypeLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model PaymentMethod {
  id BigInt @id @default(autoincrement()) @db.BigInt

  clientId BigInt
  client   Client @relation(fields: [clientId], references: [id])

  cardId      String
  expiredDate DateTime
  cvv         Int?
  country     String
  cardHolder  String

  createdBy       User     @relation("PaymentMethodCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("PaymentMethodLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model Address {
  id BigInt @id @default(autoincrement()) @db.BigInt

  providerId BigInt?   @unique @db.BigInt
  Provider   Provider? @relation(fields: [providerId], references: [id])

  clientId BigInt? @db.BigInt
  Client   Client? @relation(fields: [clientId], references: [id])

  Order Order[]

  street String // client & provider
  number String? // client

  province   Province @relation(fields: [provinceId], references: [id])
  provinceId BigInt   @db.BigInt // client & provider

  city   City   @relation(fields: [cityId], references: [id])
  cityId BigInt @db.BigInt // client & provider

  sector   Sector @relation(fields: [sectorId], references: [id])
  sectorId BigInt @db.BigInt // client & provider

  subSector   SubSector? @relation(fields: [subSectorId], references: [id])
  subSectorId BigInt?    @db.BigInt // client & provider

  references    String? // client
  isMainAddress Boolean? @default(false) // client
  alias         String? // client

  createdBy       User     @relation("AddressCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("AddressLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt

  @@map("Addresses")
}

model Province {
  id        BigInt    @id @default(autoincrement()) @db.BigInt
  name      String    @unique
  addresses Address[]

  cities     City[]
  sectors    Sector[]
  subSectors SubSector[]

  createdBy       User     @relation("ProvinceCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("ProvinceLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model City {
  id        BigInt    @id @default(autoincrement()) @db.BigInt
  name      String
  addresses Address[]

  province   Province @relation(fields: [provinceId], references: [id])
  provinceId BigInt   @db.BigInt

  sectors    Sector[]
  subSectors SubSector[]

  createdBy       User     @relation("CityCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("CityLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model Sector {
  id        BigInt    @id @default(autoincrement()) @db.BigInt
  name      String
  addresses Address[]

  province   Province @relation(fields: [provinceId], references: [id])
  provinceId BigInt   @db.BigInt

  city   City   @relation(fields: [cityId], references: [id])
  cityId BigInt @db.BigInt

  subSectors SubSector[]

  createdBy       User     @relation("SectorCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("SectorLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model SubSector {
  id        BigInt    @id @default(autoincrement()) @db.BigInt
  name      String
  addresses Address[]

  province   Province @relation(fields: [provinceId], references: [id])
  provinceId BigInt   @db.BigInt

  city   City   @relation(fields: [cityId], references: [id])
  cityId BigInt @db.BigInt

  sector   Sector @relation(fields: [sectorId], references: [id])
  sectorId BigInt @db.BigInt

  createdBy       User     @relation("SubSectorCreatedBy", fields: [createdById], references: [id])
  createdById     String
  lastUpdatedBy   User     @relation("SubSectorLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model ModificationsApproval {
  id                 BigInt             @id @default(autoincrement())
  providerId         BigInt
  provider           Provider           @relation(fields: [providerId], references: [id])
  originalInfo       String
  newInfo            String
  ModificationStatus ModificationStatus
  ModificationsType  ModificationsType
  updatedAt          DateTime           @updatedAt
  createdAt          DateTime           @default(now())

  createdById     String
  lastUpdatedById String
  createdDate     DateTime @default(now())
  lastUpdatedDate DateTime @updatedAt
}

model VerificationOrder {
  id         BigInt     @id @default(autoincrement())
  pin        String     @default(dbgenerated("to_char((floor((random() * (10000)::double precision)))::integer, 'FM0000'::text)"))
  orderId    BigInt?    @unique
  attempts   Int        @default(0)
  Order      Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  codeStatus CodeStatus @default(FIRST_CHANCE)

  @@unique([orderId, pin])
}
